
(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/_Generic\/Mqtt\/Intern' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_Mqtt_Send_V10
VAR_OUTPUT
	bBusy	: BOOL := FALSE;
END_VAR
VAR_IN_OUT
	stMqttSettings	: ST_MqttSettings;
END_VAR
VAR
	fbSocketSend 	: FB_SocketSend;
	tPingReq		: TIME;
	iState 			: INT := 0;
	stSendTelegram	: ST_MqttTelegram;
END_VAR
VAR CONSTANT
	C_STARTUP		: INT := 0;
	C_SEND			: INT := 100;
	C_SEND_WAIT		: INT := 110;
	C_IDLE			: INT := 500;
END_VAR
(* @END_DECLARATION := '0' *)
CASE iState OF
	C_STARTUP:
		bBusy := FALSE;

		stMqttSettings.tonSendPingReq(
			in := FALSE
		);

		IF
			NOT stMqttSettings.bDisconnect
			AND NOT stMqttSettings.bError
			AND stMqttSettings.bSocketConnection
		THEN
			iState := C_IDLE;
		END_IF;

	(* send mqtt telegram *)
	C_SEND:
		bBusy := TRUE;

		(* copy send telegram *)
		FC_Mqtt_CopyTelegram_V10(
			stMqttSrcTelegram	:= stMqttSettings.stMqttSendTelegram,
			stMqttDestTelegram	:= stSendTelegram,
			stMqttSettings		:= stMqttSettings
		);

		(* start send *)
		fbSocketSend(
			bExecute := FALSE
		);

		fbSocketSend(
			sSrvNetId	:= '',
			hSocket		:= stMqttSettings.hSocket,
			cbLen		:= stSendTelegram.nDataLength,
			pSrc		:= ADR(stSendTelegram.arMqttData),
			bExecute 	:= TRUE
		);

		iState := C_SEND_WAIT;

	(* wait send done *)
	C_SEND_WAIT:
		fbSocketSend(
			bExecute := FALSE
		);

		IF
			NOT fbSocketSend.bBusy
			AND NOT fbSocketSend.bError
		THEN
			(* copy last telegram *)
			FC_Mqtt_CopyTelegram_V10(
				stMqttSrcTelegram	:= stMqttSettings.stMqttSendTelegram,
				stMqttDestTelegram	:= stMqttSettings.stMqttLastSendTelegram,
				stMqttSettings		:= stMqttSettings
			);

			(* clear send buffer *)
			FC_Mqtt_ClearTelegram_V10(
				stMqttTelegram 	:= stMqttSettings.stMqttSendTelegram,
				stMqttSettings	:= stMqttSettings
			);

			iState	:= C_IDLE;
			bBusy	:= FALSE;
		END_IF;

		IF stMqttSettings.usKeepAliveTime > 0 THEN
			tPingReq := DWORD_TO_TIME(USINT_TO_DWORD(stMqttSettings.usKeepAliveTime) * 1000 - 5000);

			stMqttSettings.tonSendPingReq(
				in := FALSE
			);

			stMqttSettings.tonSendPingReq(
				in := TRUE,
				pt := tPingReq
			);
		END_IF;

		IF fbSocketSend.bError THEN
			iState 					:= C_STARTUP;
			stMqttSettings.bError	:= TRUE;
		END_IF;

		IF
			NOT stMqttSettings.bActive
			OR NOT stMqttSettings.bSocketConnection
		THEN
			iState := C_STARTUP;
		END_IF;

	(* idle *)
	C_IDLE:
		IF stMqttSettings.usKeepAliveTime > 0 THEN
			stMqttSettings.tonSendPingReq(
				in := stMqttSettings.bConnected
			);
		ELSE
			stMqttSettings.tonSendPingReq(
				in := FALSE
			);
		END_IF;

		IF
			stMqttSettings.stMqttSendTelegram.nDataLength > 0
			AND NOT stMqttSettings.bDisconnect
			AND NOT stMqttSettings.bError
			AND stMqttSettings.bSocketConnection
			AND NOT bBusy
		THEN
			iState := C_SEND;
		END_IF;

		IF
			stMqttSettings.bDisconnect
			OR stMqttSettings.bError
			OR NOT stMqttSettings.bSocketConnection
		THEN
			iState := C_STARTUP;
		END_IF;

		(* ensure at least 1 cycle pause *)
		(* bBusy := FALSE; *)

	ELSE
		iState := C_STARTUP;
END_CASE;

END_FUNCTION_BLOCK
