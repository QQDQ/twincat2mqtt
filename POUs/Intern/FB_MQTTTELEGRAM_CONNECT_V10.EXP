
(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/_Generic\/Mqtt\/Intern' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_MqttTelegram_Connect_V10
VAR_IN_OUT
	stMqttSettings	: ST_MqttSettings;
END_VAR
VAR
	iState 				: INT := 0;
	idLength			: INT;
	iuLength			: INT;
	ipLength			: INT;
	ipos				: INT;
	stMqttTelegram		: ST_MqttTelegram;
	fbMqttEncodeLength	: FB_Mqtt_EncodeLength_V10;
	bLength1			: BYTE;
	bLength2			: BYTE;
	bLength3			: BYTE;
	bLength4			: BYTE;
	bLengthAmount		: BYTE;
END_VAR
VAR CONSTANT
	C_STARTUP		: INT := 0;
	C_BUILD_CONNECT	: INT := 100;
	C_SEND_WAIT		: INT := 110;
	C_IDLE			: INT := 500;
END_VAR
(* @END_DECLARATION := '0' *)
CASE iState OF
	C_STARTUP:
		IF
			NOT stMqttSettings.bDisconnect
			AND NOT stMqttSettings.bError
			AND stMqttSettings.bSocketConnection
			AND stMqttSettings.bActive
		THEN
			iState := C_IDLE;
		END_IF;

	(* build connect telegram *)
	C_BUILD_CONNECT:
		FC_Mqtt_ClearTelegram_V10(
			stMqttTelegram	:= stMqttTelegram,
			stMqttSettings	:= stMqttSettings
		);

		(* get client id length *)
		idLength := LEN(stMqttSettings.sMqttClientId);
		IF idLength < 1 THEN
			stMqttSettings.sMqttClientId := 'x';
			idLength := 1;
		END_IF;

		IF idLength > 23 THEN
			idLength := 23;
		END_IF;

		IF
			LEN(stMqttSettings.sMqttUserId) > 0
			AND LEN(stMqttSettings.sMqttPassword) > 0
		THEN
			iuLength := LEN(stMqttSettings.sMqttUserId)+2; (* 2 byte data length*)
			ipLength := LEN(stMqttSettings.sMqttPassword)+2; (* 2 byte data length*)
		ELSE
			iuLength := 0;
			ipLength := 0;
		END_IF

		(* Calculate length *)
		(* 10 byte header, 2 byte data length, data length, [user length + 2], [password length + 2]*)
		fbMqttEncodeLength(
			dwLength := 10 + 2 + INT_TO_BYTE(idLength) + INT_TO_BYTE(iuLength) + INT_TO_BYTE(ipLength),
			bLength1 => bLength1,
			bLength2 => bLength2,
			bLength3 => bLength3,
			bLength4 => bLength4,
			bAmount	 => bLengthAmount
		);

		(* MQTT Control Packet type *)
		stMqttTelegram.arMqttData[0] := 16;
		(* Remaining Length *)
		CASE bLengthAmount OF
			1:
				stMqttTelegram.arMqttData[1] := bLength1;

			2:
				stMqttTelegram.arMqttData[1] := bLength1;
				stMqttTelegram.arMqttData[2] := bLength2;

			3:
				stMqttTelegram.arMqttData[1] := bLength1;
				stMqttTelegram.arMqttData[2] := bLength2;
				stMqttTelegram.arMqttData[3] := bLength3;

			4:
				stMqttTelegram.arMqttData[1] := bLength1;
				stMqttTelegram.arMqttData[2] := bLength2;
				stMqttTelegram.arMqttData[3] := bLength3;
				stMqttTelegram.arMqttData[4] := bLength4;
		END_CASE;
		(* init position*)
		ipos := bLengthAmount;

		(* Length MSB *)
		stMqttTelegram.arMqttData[ipos+1] := 0;
		(* Length LSB *)
		stMqttTelegram.arMqttData[ipos+2] := 4;
		(* M *)
		stMqttTelegram.arMqttData[ipos+3] := 77;
		(* Q *)
		stMqttTelegram.arMqttData[ipos+4] := 81;
		(* T *)
		stMqttTelegram.arMqttData[ipos+5] := 84;
		(* T *)
		stMqttTelegram.arMqttData[ipos+6] := 84;
		(* Protocol Level *)
		stMqttTelegram.arMqttData[ipos+7] := 4;
		(* Connect Flags *)
		stMqttTelegram.arMqttData[ipos+8].1 := TRUE;
		stMqttTelegram.arMqttData[ipos+8].6 := (ipLength>2); (* more then 2 byte data length*)
		stMqttTelegram.arMqttData[ipos+8].7 := (iuLength>2); (* more then 2 byte data length*)
		(* Keep Alive MSB *)
		stMqttTelegram.arMqttData[ipos+9] := 0;
		(* Keep Alive LSB *)
		stMqttTelegram.arMqttData[ipos+10] := stMqttSettings.usKeepAliveTime;
		(* Data length MSB *)
		stMqttTelegram.arMqttData[ipos+11] := 0;
		(* Data length LSB *)
		stMqttTelegram.arMqttData[ipos+12] := INT_TO_BYTE(idLength);

		(* Client ID *)
		MEMCPY(
			destAddr	:= ADR(stMqttTelegram.arMqttData[ipos+13]),
		    srcAddr		:= ADR(stMqttSettings.sMqttClientId),
			n  			:= idLength
		);

		ipos := ipos+13+idLength;
		IF (iuLength > 2) THEN (* more then 2 byte data length*)
			(* Data length MSB *)
			stMqttTelegram.arMqttData[ipos] := 0;
			(* Data length LSB *)
			stMqttTelegram.arMqttData[ipos+1] := INT_TO_BYTE(iuLength-2);

			(* User ID *)
			MEMCPY(
				destAddr	:= ADR(stMqttTelegram.arMqttData[ipos+2]),
			    srcAddr		:= ADR(stMqttSettings.sMqttUserId),
				n  			:= iuLength-2
			);
			ipos := ipos+iuLength;
		END_IF

		IF (iuLength > 2) THEN (* more then 2 byte data length*)
			(* Data length MSB *)
			stMqttTelegram.arMqttData[ipos] := 0;
			(* Data length LSB *)
			stMqttTelegram.arMqttData[ipos+1] := INT_TO_BYTE(ipLength-2);

			(* Password *)
			MEMCPY(
				destAddr	:= ADR(stMqttTelegram.arMqttData[ipos+2]),
			    srcAddr		:= ADR(stMqttSettings.sMqttPassword),
				n  			:= ipLength-2
			);
			ipos := ipos+ipLength;
		END_IF

		stMqttTelegram.nDataLength 	:= ipos; (* 1 byte header, 1 byte remaining length *)
		iState 						:= C_SEND_WAIT;

	(* send telegram *)
	C_SEND_WAIT:
		IF stMqttSettings.stMqttSendTelegram.nDataLength = 0 THEN
			FC_Mqtt_CopyTelegram_V10(
				stMqttSrcTelegram	:= stMqttTelegram,
				stMqttDestTelegram	:= stMqttSettings.stMqttSendTelegram,
				stMqttSettings		:= stMqttSettings
			);

			stMqttSettings.bConnectPackageSent	:= TRUE;
			iState								:= C_IDLE;
		END_IF;

		IF
			NOT stMqttSettings.bActive
			OR NOT stMqttSettings.bSocketConnection
		THEN
			iState := C_STARTUP;
		END_IF;

	(* idle *)
	C_IDLE:
		IF
			NOT stMqttSettings.bDisconnect
			AND NOT stMqttSettings.bError
			AND NOT stMqttSettings.bConnected
			AND stMqttSettings.bSocketConnection
			AND NOT stMqttSettings.bConnectPackageSent
			AND stMqttSettings.bActive
		THEN
			iState := C_BUILD_CONNECT;
		END_IF;

		(* check received telegram *)
		IF
			stMqttSettings.bConnectPackageSent
			AND stMqttSettings.stMqttReceivedTelegram.nDataLength = 4
			AND stMqttSettings.stMqttReceivedTelegram.arMqttData[0] = 32
			AND stMqttSettings.stMqttReceivedTelegram.arMqttData[1] = 2
			AND (
				(* Session pressent or not, we ignore *)
				stMqttSettings.stMqttReceivedTelegram.arMqttData[2] = 1
				OR
				stMqttSettings.stMqttReceivedTelegram.arMqttData[2] = 0
			)
			AND stMqttSettings.stMqttReceivedTelegram.arMqttData[3] = 0
		THEN
			stMqttSettings.bConnected := TRUE;
			FC_Mqtt_ClearTelegram_V10(
				stMqttTelegram	:= stMqttSettings.stMqttReceivedTelegram,
				stMqttSettings	:= stMqttSettings
			);
		END_IF;

		(* error on connect *)
		IF
			stMqttSettings.bConnectPackageSent
			AND stMqttSettings.stMqttReceivedTelegram.nDataLength = 4
			AND stMqttSettings.stMqttReceivedTelegram.arMqttData[0] = 32
			AND stMqttSettings.stMqttReceivedTelegram.arMqttData[1] = 2
			AND stMqttSettings.stMqttReceivedTelegram.arMqttData[3] <> 0
		THEN
			stMqttSettings.bError := TRUE;
		END_IF;

		IF
			stMqttSettings.bDisconnect
			OR stMqttSettings.bError
			OR NOT stMqttSettings.bSocketConnection
			OR NOT stMqttSettings.bActive
		THEN
			iState := C_STARTUP;
		END_IF;

	ELSE
		iState := C_STARTUP;
END_CASE;


END_FUNCTION_BLOCK
